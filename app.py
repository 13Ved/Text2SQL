import streamlit as st
import os
import sqlite3
import google.generativeai as genai
from dotenv import load_dotenv


load_dotenv()

# Configure Gemini API Key
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Function to load Google Gemini Model and provide queries as response
def get_gemini_response(question, prompt):
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content([prompt[0], question])
    # Clean up the response by removing unwanted formatting
    sql_query = response.text.strip().replace("```sql", "").replace("```", "").strip()
    return sql_query  # Return the cleaned SQL query

# Function to execute the SQL query and get results
def execute_query(query, db):
    conn = sqlite3.connect(db)
    cur = conn.cursor()
    try:
        cur.execute(query)
        rows = cur.fetchall()
        return rows
    except sqlite3.Error as e:
        return f"Error executing query: {e}"
    finally:
        conn.close()

# Define Your Prompt
prompt = [
    """
    You are an expert in converting English questions to SQL queries! The SQL database has the following tables: ACTOR, ADDRESS, CATEGORY, CITY, COUNTRY, CUSTOMER, FILM, FILM_ACTOR, FILM_CATEGORY, INVENTORY, LANGUAGE, PAYMENT, RENTAL, STAFF, STORE. Each table has specific columns as follows:
- ACTOR: actor_id, first_name, last_name, last_update
- ADDRESS: address_id, address, address2, district, city_id, postal_code, phone, last_update
- CATEGORY: category_id, name, last_update
- CITY: city_id, city, country_id, last_update
- COUNTRY: country_id, country, last_update
- CUSTOMER: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update
- FILM: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update
- FILM_ACTOR: actor_id, film_id, last_update
- FILM_CATEGORY: film_id, category_id, last_update
- INVENTORY: inventory_id, film_id, store_id, last_update
- LANGUAGE: language_id, name, last_update
- PAYMENT: payment_id, customer_id, staff_id, rental_id, amount, payment_date
- RENTAL: rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update
- STAFF: staff_id, first_name, last_name, address_id, email, store_id, active, username, password, last_update
- STORE: store_id, manager_staff_id, address_id, last_update
You can join tables based on related keys to derive meaningful insights. When writing SQL queries, consider using the following tricks for specific questions:

1. **To Calculate Revenue Generated by Each Store**:
   - Join the PAYMENT table with the CUSTOMER table using customer_id.
   - Join the resulting table with the STORE table using store_id to include store-related data.
   - Sum the amount column for each store to get the total revenue.

2. **To Find the Number of Rentals for Each Film**:
   - Join the RENTAL table with INVENTORY using inventory_id.
   - Group the results by film_id to get the number of rentals for each film.

3. **General Trick for Joining and Aggregation**:
   - Identify common columns (foreign keys) to join tables correctly. 
   - Once joined, use SQL functions like SUM(), AVG(), COUNT(), etc., based on the requirement to get insights.


Convert the questions into appropriate SQL commands without any formatting or code indicators.
    """
]

# Streamlit App
st.set_page_config(page_title="Text to SQL Query App")
st.header("Text to SQL Query Application")

question = st.text_input("Input your question here:", key="input")
submit = st.button("Ask the question")

# If the submit button is clicked
if submit:
    query = get_gemini_response(question, prompt)  # Get the SQL query from the Gemini API
    response = execute_query(query, "name_of_the_database.db")  # Execute the query

    # Display the results
    st.subheader("Response:")
    if isinstance(response, str):
        st.error(response)  # Show error message if there was an issue with the query
    else:
        for row in response:
            st.write(row)  # Show each row of the results
